@page "/"
@using MetalStorming20.Core

<h1>MetalStorming Planner</h1>

<div class="row g-3">
    <div class="col-md-4">
        <label class="form-label">Current Plane Level (1-20)</label>
        <input type="number" class="form-control" @bind-value="currentPlaneLevel" min="1" max="20" />
    </div>
    <div class="col-md-4">
        <label class="form-label">Current Mastery Level (1-23)</label>
        <input type="number" class="form-control" @bind-value="currentMasteryLevel" min="1" max="23" />
    </div>
    <div class="col-md-4">
        <label class="form-label">Target Mastery Level (1-23)</label>
        <input type="number" class="form-control" @bind-value="targetMasteryLevel" min="1" max="23" />
    </div>
    <div class="col-md-4">
        <label class="form-label">Current Universal Parts</label>
        <input type="number" class="form-control" @bind-value="currentParts" min="0" />
    </div>
    <div class="col-md-4">
        <label class="form-label">Current Silver</label>
        <input type="number" class="form-control" @bind-value="currentSilver" min="0" />
    </div>
</div>

<div class="mt-3">
    <button class="btn btn-primary" @onclick="Recalculate">Calculate</button>
</div>

@if (hasCalculated)
{
    <div class="mt-4">
        <h5>Requirements from current → 20</h5>
        <div>Raw Need: Parts @needParts:N0, Silver @needSilver:N0</div>
        <div>After Bank: Parts @shortPartsAfterBank:N0, Silver @shortSilverAfterBank:N0</div>

        <h5 class="mt-3">Future Mastery Rewards (M@(currentMasteryLevel + 1) → M@targetMasteryLevel)</h5>
        <div>No-Gold: Parts +@nonGoldParts:N0, Silver +@nonGoldSilver:N0</div>
        <div>With Gold: Parts +@goldParts:N0, Silver +@goldSilver:N0</div>

        <h5 class="mt-3">Remaining Needed from NON-MASTERY sources</h5>
        <div>No-Gold path: Parts @shortNoGoldParts:N0, Silver @shortNoGoldSilver:N0</div>
        <div>With Gold path: Parts @shortGoldParts:N0, Silver @shortGoldSilver:N0</div>

        <details class="mt-3">
            <summary>Show per-upgrade breakdown</summary>
            <table class="table table-sm mt-2">
                <thead>
                    <tr><th>Upgrade</th><th>Parts</th><th>Silver</th></tr>
                </thead>
                <tbody>
                    @foreach (var step in steps.Where(s => s.fromLevel >= currentPlaneLevel && s.toLevel <= 20))
                    {
                        <tr>
                            <td>@step.fromLevel → @step.toLevel</td>
                            <td>@step.parts.ToString("N0")</td>
                            <td>@step.silver.ToString("N0")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </details>
    </div>
}

@code {
    int currentPlaneLevel = 1;
    int currentMasteryLevel = 1;
    int targetMasteryLevel = 23;
    int currentParts = 0;
    int currentSilver = 0;

    bool hasCalculated;
    int needParts, needSilver;
    int shortPartsAfterBank, shortSilverAfterBank;
    int nonGoldParts, nonGoldSilver, goldParts, goldSilver;
    int shortNoGoldParts, shortNoGoldSilver, shortGoldParts, shortGoldSilver;
    IReadOnlyList<(int fromLevel, int toLevel, int parts, int silver)> steps = Array.Empty<(int, int, int, int)>();

    void Recalculate()
    {
        targetMasteryLevel = Planner.Clamp(targetMasteryLevel, 1, 23);
        currentPlaneLevel = Planner.Clamp(currentPlaneLevel, 1, 20);
        currentMasteryLevel = Planner.Clamp(currentMasteryLevel, 1, 23);

        (needParts, needSilver) = Planner.NeedToLevel20(currentPlaneLevel);
        shortPartsAfterBank = Math.Max(0, needParts - currentParts);
        shortSilverAfterBank = Math.Max(0, needSilver - currentSilver);

        (nonGoldParts, nonGoldSilver) = Planner.FutureMasteryRewards(currentMasteryLevel, targetMasteryLevel, includeGold: false);
        (goldParts, goldSilver) = Planner.FutureMasteryRewards(currentMasteryLevel, targetMasteryLevel, includeGold: true);

        shortNoGoldParts = Math.Max(0, shortPartsAfterBank - nonGoldParts);
        shortNoGoldSilver = Math.Max(0, shortSilverAfterBank - nonGoldSilver);

        shortGoldParts = Math.Max(0, shortPartsAfterBank - goldParts);
        shortGoldSilver = Math.Max(0, shortSilverAfterBank - goldSilver);

        steps = Planner.GetUpgradeSteps();
        hasCalculated = true;
    }
}
